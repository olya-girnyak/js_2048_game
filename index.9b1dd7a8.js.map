{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar button = document.querySelector(\".button\");\nvar gameMessageWin = document.querySelector(\".message-win\");\nvar gameMessageLose = document.querySelector(\".message-lose\");\nvar gameMessageStart = document.querySelector(\".message-start\");\nvar gameScore = document.querySelector(\".game-score\");\nvar cells = document.querySelectorAll(\".field-cell\");\nvar fieldSize = 4;\nvar winValue = 2048;\nvar score = 0;\nvar field = Array.from({\n    length: fieldSize\n}, function() {\n    return Array(fieldSize).fill(0);\n});\nfunction initializeGame() {\n    score = 0;\n    gameScore.textContent = score;\n    gameMessageWin.classList.add(\"hidden\");\n    gameMessageLose.classList.add(\"hidden\");\n    gameMessageStart.classList.remove(\"hidden\");\n    clearField();\n}\nfunction clearField() {\n    var allCells = [];\n    field.forEach(function(row, rowIndex) {\n        row.forEach(function(value, colIndex) {\n            allCells.push({\n                row: rowIndex,\n                col: colIndex\n            });\n        });\n    });\n    allCells.forEach(function(cell) {\n        var row = cell.row, col = cell.col;\n        field[row][col] = 0;\n    });\n}\nfunction generateCell() {\n    var availableCells = [];\n    field.forEach(function(row, rowIndex) {\n        row.forEach(function(value, colIndex) {\n            if (value === 0) availableCells.push({\n                row: rowIndex,\n                col: colIndex\n            });\n        });\n    });\n    if (availableCells.length > 0) {\n        var _availableCells_Math_floor = availableCells[Math.floor(Math.random() * availableCells.length)], row = _availableCells_Math_floor.row, col = _availableCells_Math_floor.col;\n        field[row][col] = Math.random() < 0.9 ? 2 : 4;\n        updateField();\n    }\n}\nfunction updateField() {\n    field.forEach(function(row, rowIndex) {\n        row.forEach(function(value, colIndex) {\n            var cell = cells[rowIndex * fieldSize + colIndex];\n            cell.textContent = value > 0 ? value : \"\";\n            cell.className = \"field-cell field-cell--\".concat(value);\n        });\n    });\n}\nfunction moveCells(direction) {\n    var moved = false;\n    function rotateField() {\n        field = field[0].map(function(col, i) {\n            return field.map(function(row) {\n                return row[i];\n            });\n        }).reverse();\n    }\n    function moveRowOrColumn(arr) {\n        var nonZero = arr.filter(function(value) {\n            return value !== 0;\n        });\n        var result = [];\n        for(var i = 0; i < nonZero.length; i++)if (i < nonZero.length - 1 && nonZero[i] === nonZero[i + 1]) {\n            var newValue = nonZero[i] * 2;\n            result.push(newValue);\n            score += newValue;\n            i++;\n        } else result.push(nonZero[i]);\n        while(result.length < arr.length)result.push(0);\n        return result;\n    }\n    switch(direction){\n        case \"up\":\n            rotateField();\n            for(var i = 0; i < fieldSize; i++){\n                var newRow = moveRowOrColumn(field[i]);\n                if (!moved && !arraysEqual(newRow, field[i])) moved = true;\n                field[i] = newRow;\n            }\n            rotateField();\n            rotateField();\n            rotateField();\n            break;\n        case \"down\":\n            rotateField();\n            rotateField();\n            rotateField();\n            for(var i1 = 0; i1 < fieldSize; i1++){\n                var newRow1 = moveRowOrColumn(field[i1]);\n                if (!moved && !arraysEqual(newRow1, field[i1])) moved = true;\n                field[i1] = newRow1;\n            }\n            rotateField();\n            break;\n        case \"left\":\n            for(var i2 = 0; i2 < fieldSize; i2++){\n                var newRow2 = moveRowOrColumn(field[i2]);\n                if (!moved && !arraysEqual(newRow2, field[i2])) moved = true;\n                field[i2] = newRow2;\n            }\n            break;\n        case \"right\":\n            rotateField();\n            rotateField();\n            for(var i3 = 0; i3 < fieldSize; i3++){\n                var newRow3 = moveRowOrColumn(field[i3]);\n                if (!moved && !arraysEqual(newRow3, field[i3])) moved = true;\n                field[i3] = newRow3;\n            }\n            rotateField();\n            rotateField();\n            break;\n    }\n    if (moved) {\n        updateField();\n        gameScore.textContent = score;\n        generateCell();\n        if (field.flat().includes(winValue)) gameMessageWin.classList.remove(\"hidden\");\n        if (!canMove()) gameMessageLose.classList.remove(\"hidden\");\n    }\n}\nfunction canMove() {\n    for(var i = 0; i < fieldSize; i++)for(var j = 0; j < fieldSize; j++){\n        if (field[i][j] === 0) return true;\n        if (j < fieldSize - 1 && field[i][j] === field[i][j + 1]) return true;\n        if (i < fieldSize - 1 && field[i][j] === field[i + 1][j]) return true;\n    }\n    return false;\n}\nfunction arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false;\n    for(var i = 0; i < arr1.length; i++){\n        if (arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n}\ndocument.addEventListener(\"keydown\", function(eventButton) {\n    eventButton.preventDefault();\n    if (gameMessageStart.classList.contains(\"hidden\")) switch(eventButton.key){\n        case \"ArrowUp\":\n            moveCells(\"up\");\n            break;\n        case \"ArrowDown\":\n            moveCells(\"down\");\n            break;\n        case \"ArrowLeft\":\n            moveCells(\"left\");\n            break;\n        case \"ArrowRight\":\n            moveCells(\"right\");\n            break;\n    }\n});\nbutton.addEventListener(\"click\", function() {\n    initializeGame();\n    button.classList.remove(\"start\");\n    button.classList.add(\"restart\");\n    button.textContent = \"Restart\";\n    gameMessageStart.classList.add(\"hidden\");\n    generateCell();\n    generateCell();\n});\ninitializeGame();\n\n//# sourceMappingURL=index.9b1dd7a8.js.map\n","'use strict';\n\nconst button = document.querySelector('.button');\nconst gameMessageWin = document.querySelector('.message-win');\nconst gameMessageLose = document.querySelector('.message-lose');\nconst gameMessageStart = document.querySelector('.message-start');\nconst gameScore = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\n\nconst fieldSize = 4;\nconst winValue = 2048;\nlet score = 0;\nlet field = Array.from({ length: fieldSize }, () => Array(fieldSize).fill(0));\n\nfunction initializeGame() {\n  score = 0;\n  gameScore.textContent = score;\n  gameMessageWin.classList.add('hidden');\n  gameMessageLose.classList.add('hidden');\n  gameMessageStart.classList.remove('hidden');\n  clearField();\n}\n\nfunction clearField() {\n  const allCells = [];\n\n  field.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      allCells.push({\n        row: rowIndex, col: colIndex,\n      });\n    });\n  });\n\n  allCells.forEach((cell) => {\n    const { row, col } = cell;\n\n    field[row][col] = 0;\n  });\n}\n\nfunction generateCell() {\n  const availableCells = [];\n\n  field.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value === 0) {\n        availableCells.push({\n          row: rowIndex, col: colIndex,\n        });\n      }\n    });\n  });\n\n  if (availableCells.length > 0) {\n    const { row, col }\n      = availableCells[Math.floor(Math.random() * availableCells.length)];\n\n    field[row][col] = Math.random() < 0.9 ? 2 : 4;\n    updateField();\n  }\n}\n\nfunction updateField() {\n  field.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      const cell = cells[rowIndex * fieldSize + colIndex];\n\n      cell.textContent = value > 0 ? value : '';\n      cell.className = `field-cell field-cell--${value}`;\n    });\n  });\n}\n\nfunction moveCells(direction) {\n  let moved = false;\n\n  function rotateField() {\n    field = field[0].map((col, i) => field.map(row => row[i])).reverse();\n  }\n\n  function moveRowOrColumn(arr) {\n    const nonZero = arr.filter((value) => value !== 0);\n    const result = [];\n\n    for (let i = 0; i < nonZero.length; i++) {\n      if (i < nonZero.length - 1 && nonZero[i] === nonZero[i + 1]) {\n        const newValue = nonZero[i] * 2;\n\n        result.push(newValue);\n        score += newValue;\n        i++;\n      } else {\n        result.push(nonZero[i]);\n      }\n    }\n\n    while (result.length < arr.length) {\n      result.push(0);\n    }\n\n    return result;\n  }\n\n  switch (direction) {\n    case 'up':\n      rotateField();\n\n      for (let i = 0; i < fieldSize; i++) {\n        const newRow = moveRowOrColumn(field[i]);\n\n        if (!moved && !arraysEqual(newRow, field[i])) {\n          moved = true;\n        }\n        field[i] = newRow;\n      }\n      rotateField();\n      rotateField();\n      rotateField();\n      break;\n\n    case 'down':\n      rotateField();\n      rotateField();\n      rotateField();\n\n      for (let i = 0; i < fieldSize; i++) {\n        const newRow = moveRowOrColumn(field[i]);\n\n        if (!moved && !arraysEqual(newRow, field[i])) {\n          moved = true;\n        }\n        field[i] = newRow;\n      }\n      rotateField();\n      break;\n\n    case 'left':\n      for (let i = 0; i < fieldSize; i++) {\n        const newRow = moveRowOrColumn(field[i]);\n\n        if (!moved && !arraysEqual(newRow, field[i])) {\n          moved = true;\n        }\n        field[i] = newRow;\n      }\n      break;\n\n    case 'right':\n      rotateField();\n      rotateField();\n\n      for (let i = 0; i < fieldSize; i++) {\n        const newRow = moveRowOrColumn(field[i]);\n\n        if (!moved && !arraysEqual(newRow, field[i])) {\n          moved = true;\n        }\n        field[i] = newRow;\n      }\n      rotateField();\n      rotateField();\n      break;\n  }\n\n  if (moved) {\n    updateField();\n    gameScore.textContent = score;\n    generateCell();\n\n    if (field.flat().includes(winValue)) {\n      gameMessageWin.classList.remove('hidden');\n    }\n\n    if (!canMove()) {\n      gameMessageLose.classList.remove('hidden');\n    }\n  }\n}\n\nfunction canMove() {\n  for (let i = 0; i < fieldSize; i++) {\n    for (let j = 0; j < fieldSize; j++) {\n      if (field[i][j] === 0) {\n        return true;\n      }\n\n      if (j < fieldSize - 1 && field[i][j] === field[i][j + 1]) {\n        return true;\n      }\n\n      if (i < fieldSize - 1 && field[i][j] === field[i + 1][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction arraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ndocument.addEventListener('keydown', eventButton => {\n  eventButton.preventDefault();\n\n  if (gameMessageStart.classList.contains('hidden')) {\n    switch (eventButton.key) {\n      case 'ArrowUp':\n        moveCells('up');\n        break;\n      case 'ArrowDown':\n        moveCells('down');\n        break;\n      case 'ArrowLeft':\n        moveCells('left');\n        break;\n      case 'ArrowRight':\n        moveCells('right');\n        break;\n    }\n  }\n});\n\nbutton.addEventListener('click', function() {\n  initializeGame();\n  button.classList.remove('start');\n  button.classList.add('restart');\n  button.textContent = 'Restart';\n  gameMessageStart.classList.add('hidden');\n  generateCell();\n  generateCell();\n});\n\ninitializeGame();\n"],"names":["button","document","querySelector","gameMessageWin","gameMessageLose","gameMessageStart","gameScore","cells","querySelectorAll","score","field","Array","from","length","fill","initializeGame","allCells","textContent","classList","add","remove","forEach","row","rowIndex","value","colIndex","push","col","cell","generateCell","availableCells","_availableCells_Math_floor","Math","floor","random","updateField","className","concat","moveCells","direction","moved","rotateField","map","i","reverse","moveRowOrColumn","arr","nonZero","filter","result","newValue","newRow","arraysEqual","i1","newRow1","i2","newRow2","i3","newRow3","flat","includes","canMove","j","fieldSize","arr1","arr2","addEventListener","eventButton","preventDefault","contains","key"],"version":3,"file":"index.9b1dd7a8.js.map"}